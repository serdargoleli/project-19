apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-miateknoloji-io
  namespace: $APP_NAMESPACE
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: >-
    $DOCKER_CONFIG_JSON_SECRET
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fe-configmap
  namespace: $APP_NAMESPACE
data:
  .env: |
    NEXT_PUBLIC_BASE_URL= "https://admin-ev.miateknoloji.io"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: $APP_NAME
    component: $APP_NAME
    tier: app
  name: $APP_NAME
  namespace: $APP_NAMESPACE
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app: $APP_NAME
      component: $APP_NAME
      tier: app
  template:
    metadata:
      labels:
        app: $APP_NAME
        component: $APP_NAME
        tier: app
    spec:
      imagePullSecrets:
        - name: docker-registry-miateknoloji-io
      volumes:
        - name: config-volume
          configMap:
            name: fe-configmap
      containers:
        - env:
            - name: CACHE_IGNORE
              value: js|html
            - name: CACHE_PUBLIC_EXPIRATION
              value: 3d
          image: $DOCKER_REGISTRY/$DOCKER_NAMESPACE/$BRANCH_NAME:$BUILD_NUMBER
          volumeMounts:
            - name: config-volume
              mountPath: /app/.env
              subPath: .env
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            timeoutSeconds: 10
            failureThreshold: 30
            periodSeconds: 5
          imagePullPolicy: Always
          name: $APP_NAME
          ports:
            - containerPort: 3000
              protocol: TCP
          resources:
            limits:
              cpu: 300m
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: $APP_NAME
    component: $APP_NAME
  name: $APP_NAME
  namespace: $APP_NAMESPACE
spec:
  ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: $APP_NAME
    component: $APP_NAME
    tier: app
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: $APP_NAME
    component: $APP_NAME
  name: $APP_NAME
  namespace: $APP_NAMESPACE
spec:
  rules:
    - host: $APP_DOMAIN
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: $APP_NAME
                port:
                  number: 3000
